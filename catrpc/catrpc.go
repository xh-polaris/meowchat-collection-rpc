// Code generated by goctl. DO NOT EDIT!
// Source: collection.proto

package catrpc

import (
	"context"
	pb2 "github.com/xh-polaris/meowchat-collection-rpc/pb"

	"github.com/xh-polaris/meowchat-collection-rpc/types/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddCatReq      = pb2.AddCatReq
	AddCatResp     = pb2.AddCatResp
	Cat            = pb2.Cat
	DeleteCatReq   = pb2.DeleteCatReq
	DeleteCatResp  = pb2.DeleteCatResp
	GetCatReq      = pb2.GetCatReq
	GetCatResp     = pb2.GetCatResp
	GetManyCatReq  = pb2.GetManyCatReq
	GetManyCatResp = pb2.GetManyCatResp
	UpdateCatReq   = pb2.UpdateCatReq
	UpdateCatResp  = pb2.UpdateCatResp

	CatRPC interface {
		Get_Many_Cat(ctx context.Context, in *GetManyCatReq, opts ...grpc.CallOption) (*GetManyCatResp, error)
		Get_Cat(ctx context.Context, in *GetCatReq, opts ...grpc.CallOption) (*GetCatResp, error)
		Add_Cat(ctx context.Context, in *AddCatReq, opts ...grpc.CallOption) (*AddCatResp, error)
		Update_Cat(ctx context.Context, in *UpdateCatReq, opts ...grpc.CallOption) (*UpdateCatResp, error)
		Delete_Cat(ctx context.Context, in *DeleteCatReq, opts ...grpc.CallOption) (*DeleteCatResp, error)
	}

	defaultCatRPC struct {
		cli zrpc.Client
	}
)

func NewCatRPC(cli zrpc.Client) CatRPC {
	return &defaultCatRPC{
		cli: cli,
	}
}

func (m *defaultCatRPC) Get_Many_Cat(ctx context.Context, in *GetManyCatReq, opts ...grpc.CallOption) (*GetManyCatResp, error) {
	client := pb.NewCatRPCClient(m.cli.Conn())
	return client.Get_Many_Cat(ctx, in, opts...)
}

func (m *defaultCatRPC) Get_Cat(ctx context.Context, in *GetCatReq, opts ...grpc.CallOption) (*GetCatResp, error) {
	client := pb.NewCatRPCClient(m.cli.Conn())
	return client.Get_Cat(ctx, in, opts...)
}

func (m *defaultCatRPC) Add_Cat(ctx context.Context, in *AddCatReq, opts ...grpc.CallOption) (*AddCatResp, error) {
	client := pb.NewCatRPCClient(m.cli.Conn())
	return client.Add_Cat(ctx, in, opts...)
}

func (m *defaultCatRPC) Update_Cat(ctx context.Context, in *UpdateCatReq, opts ...grpc.CallOption) (*UpdateCatResp, error) {
	client := pb.NewCatRPCClient(m.cli.Conn())
	return client.Update_Cat(ctx, in, opts...)
}

func (m *defaultCatRPC) Delete_Cat(ctx context.Context, in *DeleteCatReq, opts ...grpc.CallOption) (*DeleteCatResp, error) {
	client := pb.NewCatRPCClient(m.cli.Conn())
	return client.Delete_Cat(ctx, in, opts...)
}
