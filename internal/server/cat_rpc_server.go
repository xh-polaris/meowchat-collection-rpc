// Code generated by goctl. DO NOT EDIT!
// Source: collection.proto

package server

import (
	"context"
	pb2 "github.com/xh-polaris/meowchat-collection-rpc/pb"

	"github.com/xh-polaris/meowchat-collection-rpc/internal/logic"
	"github.com/xh-polaris/meowchat-collection-rpc/internal/svc"
)

type CatRpcServer struct {
	svcCtx *svc.ServiceContext
	pb2.UnimplementedCatRpcServer
}

func NewCatRpcServer(svcCtx *svc.ServiceContext) *CatRpcServer {
	return &CatRpcServer{
		svcCtx: svcCtx,
	}
}

func (s *CatRpcServer) GetManyCat(ctx context.Context, in *pb2.GetManyCatReq) (*pb2.GetManyCatResp, error) {
	l := logic.NewGetManyCatLogic(ctx, s.svcCtx)
	return l.GetManyCat(in)
}

func (s *CatRpcServer) GetCat(ctx context.Context, in *pb2.GetCatReq) (*pb2.GetCatResp, error) {
	l := logic.NewGetCatLogic(ctx, s.svcCtx)
	return l.GetCat(in)
}

func (s *CatRpcServer) AddCat(ctx context.Context, in *pb2.AddCatReq) (*pb2.AddCatResp, error) {
	l := logic.NewAddCatLogic(ctx, s.svcCtx)
	return l.AddCat(in)
}

func (s *CatRpcServer) UpdateCat(ctx context.Context, in *pb2.UpdateCatReq) (*pb2.UpdateCatResp, error) {
	l := logic.NewUpdateCatLogic(ctx, s.svcCtx)
	return l.UpdateCat(in)
}

func (s *CatRpcServer) DeleteCat(ctx context.Context, in *pb2.DeleteCatReq) (*pb2.DeleteCatResp, error) {
	l := logic.NewDeleteCatLogic(ctx, s.svcCtx)
	return l.DeleteCat(in)
}
