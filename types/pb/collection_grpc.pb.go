// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: collection.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CollectionRpcClient is the client API for CollectionRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CollectionRpcClient interface {
	SearchCat(ctx context.Context, in *SearchCatReq, opts ...grpc.CallOption) (*SearchCatResp, error)
	ListCat(ctx context.Context, in *ListCatReq, opts ...grpc.CallOption) (*ListCatResp, error)
	RetrieveCat(ctx context.Context, in *RetrieveCatReq, opts ...grpc.CallOption) (*RetrieveCatResp, error)
	CreateCat(ctx context.Context, in *CreateCatReq, opts ...grpc.CallOption) (*CreateCatResp, error)
	UpdateCat(ctx context.Context, in *UpdateCatReq, opts ...grpc.CallOption) (*UpdateCatResp, error)
	DeleteCat(ctx context.Context, in *DeleteCatReq, opts ...grpc.CallOption) (*DeleteCatResp, error)
}

type collectionRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewCollectionRpcClient(cc grpc.ClientConnInterface) CollectionRpcClient {
	return &collectionRpcClient{cc}
}

func (c *collectionRpcClient) SearchCat(ctx context.Context, in *SearchCatReq, opts ...grpc.CallOption) (*SearchCatResp, error) {
	out := new(SearchCatResp)
	err := c.cc.Invoke(ctx, "/cat.collection_rpc/SearchCat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionRpcClient) ListCat(ctx context.Context, in *ListCatReq, opts ...grpc.CallOption) (*ListCatResp, error) {
	out := new(ListCatResp)
	err := c.cc.Invoke(ctx, "/cat.collection_rpc/ListCat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionRpcClient) RetrieveCat(ctx context.Context, in *RetrieveCatReq, opts ...grpc.CallOption) (*RetrieveCatResp, error) {
	out := new(RetrieveCatResp)
	err := c.cc.Invoke(ctx, "/cat.collection_rpc/RetrieveCat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionRpcClient) CreateCat(ctx context.Context, in *CreateCatReq, opts ...grpc.CallOption) (*CreateCatResp, error) {
	out := new(CreateCatResp)
	err := c.cc.Invoke(ctx, "/cat.collection_rpc/CreateCat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionRpcClient) UpdateCat(ctx context.Context, in *UpdateCatReq, opts ...grpc.CallOption) (*UpdateCatResp, error) {
	out := new(UpdateCatResp)
	err := c.cc.Invoke(ctx, "/cat.collection_rpc/UpdateCat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionRpcClient) DeleteCat(ctx context.Context, in *DeleteCatReq, opts ...grpc.CallOption) (*DeleteCatResp, error) {
	out := new(DeleteCatResp)
	err := c.cc.Invoke(ctx, "/cat.collection_rpc/DeleteCat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CollectionRpcServer is the server API for CollectionRpc service.
// All implementations must embed UnimplementedCollectionRpcServer
// for forward compatibility
type CollectionRpcServer interface {
	SearchCat(context.Context, *SearchCatReq) (*SearchCatResp, error)
	ListCat(context.Context, *ListCatReq) (*ListCatResp, error)
	RetrieveCat(context.Context, *RetrieveCatReq) (*RetrieveCatResp, error)
	CreateCat(context.Context, *CreateCatReq) (*CreateCatResp, error)
	UpdateCat(context.Context, *UpdateCatReq) (*UpdateCatResp, error)
	DeleteCat(context.Context, *DeleteCatReq) (*DeleteCatResp, error)
	mustEmbedUnimplementedCollectionRpcServer()
}

// UnimplementedCollectionRpcServer must be embedded to have forward compatible implementations.
type UnimplementedCollectionRpcServer struct {
}

func (UnimplementedCollectionRpcServer) SearchCat(context.Context, *SearchCatReq) (*SearchCatResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchCat not implemented")
}
func (UnimplementedCollectionRpcServer) ListCat(context.Context, *ListCatReq) (*ListCatResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCat not implemented")
}
func (UnimplementedCollectionRpcServer) RetrieveCat(context.Context, *RetrieveCatReq) (*RetrieveCatResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveCat not implemented")
}
func (UnimplementedCollectionRpcServer) CreateCat(context.Context, *CreateCatReq) (*CreateCatResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCat not implemented")
}
func (UnimplementedCollectionRpcServer) UpdateCat(context.Context, *UpdateCatReq) (*UpdateCatResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCat not implemented")
}
func (UnimplementedCollectionRpcServer) DeleteCat(context.Context, *DeleteCatReq) (*DeleteCatResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCat not implemented")
}
func (UnimplementedCollectionRpcServer) mustEmbedUnimplementedCollectionRpcServer() {}

// UnsafeCollectionRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CollectionRpcServer will
// result in compilation errors.
type UnsafeCollectionRpcServer interface {
	mustEmbedUnimplementedCollectionRpcServer()
}

func RegisterCollectionRpcServer(s grpc.ServiceRegistrar, srv CollectionRpcServer) {
	s.RegisterService(&CollectionRpc_ServiceDesc, srv)
}

func _CollectionRpc_SearchCat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchCatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionRpcServer).SearchCat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cat.collection_rpc/SearchCat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionRpcServer).SearchCat(ctx, req.(*SearchCatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectionRpc_ListCat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionRpcServer).ListCat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cat.collection_rpc/ListCat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionRpcServer).ListCat(ctx, req.(*ListCatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectionRpc_RetrieveCat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveCatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionRpcServer).RetrieveCat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cat.collection_rpc/RetrieveCat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionRpcServer).RetrieveCat(ctx, req.(*RetrieveCatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectionRpc_CreateCat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionRpcServer).CreateCat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cat.collection_rpc/CreateCat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionRpcServer).CreateCat(ctx, req.(*CreateCatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectionRpc_UpdateCat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionRpcServer).UpdateCat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cat.collection_rpc/UpdateCat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionRpcServer).UpdateCat(ctx, req.(*UpdateCatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectionRpc_DeleteCat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionRpcServer).DeleteCat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cat.collection_rpc/DeleteCat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionRpcServer).DeleteCat(ctx, req.(*DeleteCatReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CollectionRpc_ServiceDesc is the grpc.ServiceDesc for CollectionRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CollectionRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cat.collection_rpc",
	HandlerType: (*CollectionRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchCat",
			Handler:    _CollectionRpc_SearchCat_Handler,
		},
		{
			MethodName: "ListCat",
			Handler:    _CollectionRpc_ListCat_Handler,
		},
		{
			MethodName: "RetrieveCat",
			Handler:    _CollectionRpc_RetrieveCat_Handler,
		},
		{
			MethodName: "CreateCat",
			Handler:    _CollectionRpc_CreateCat_Handler,
		},
		{
			MethodName: "UpdateCat",
			Handler:    _CollectionRpc_UpdateCat_Handler,
		},
		{
			MethodName: "DeleteCat",
			Handler:    _CollectionRpc_DeleteCat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "collection.proto",
}
