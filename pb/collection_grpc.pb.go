// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: collection.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CatRpcClient is the client API for CatRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CatRpcClient interface {
	GetManyCat(ctx context.Context, in *GetManyCatReq, opts ...grpc.CallOption) (*GetManyCatResp, error)
	GetCat(ctx context.Context, in *GetCatReq, opts ...grpc.CallOption) (*GetCatResp, error)
	AddCat(ctx context.Context, in *AddCatReq, opts ...grpc.CallOption) (*AddCatResp, error)
	UpdateCat(ctx context.Context, in *UpdateCatReq, opts ...grpc.CallOption) (*UpdateCatResp, error)
	DeleteCat(ctx context.Context, in *DeleteCatReq, opts ...grpc.CallOption) (*DeleteCatResp, error)
}

type catRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewCatRpcClient(cc grpc.ClientConnInterface) CatRpcClient {
	return &catRpcClient{cc}
}

func (c *catRpcClient) GetManyCat(ctx context.Context, in *GetManyCatReq, opts ...grpc.CallOption) (*GetManyCatResp, error) {
	out := new(GetManyCatResp)
	err := c.cc.Invoke(ctx, "/cat.CatRpc/GetManyCat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catRpcClient) GetCat(ctx context.Context, in *GetCatReq, opts ...grpc.CallOption) (*GetCatResp, error) {
	out := new(GetCatResp)
	err := c.cc.Invoke(ctx, "/cat.CatRpc/GetCat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catRpcClient) AddCat(ctx context.Context, in *AddCatReq, opts ...grpc.CallOption) (*AddCatResp, error) {
	out := new(AddCatResp)
	err := c.cc.Invoke(ctx, "/cat.CatRpc/AddCat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catRpcClient) UpdateCat(ctx context.Context, in *UpdateCatReq, opts ...grpc.CallOption) (*UpdateCatResp, error) {
	out := new(UpdateCatResp)
	err := c.cc.Invoke(ctx, "/cat.CatRpc/UpdateCat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catRpcClient) DeleteCat(ctx context.Context, in *DeleteCatReq, opts ...grpc.CallOption) (*DeleteCatResp, error) {
	out := new(DeleteCatResp)
	err := c.cc.Invoke(ctx, "/cat.CatRpc/DeleteCat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CatRpcServer is the server API for CatRpc service.
// All implementations must embed UnimplementedCatRpcServer
// for forward compatibility
type CatRpcServer interface {
	GetManyCat(context.Context, *GetManyCatReq) (*GetManyCatResp, error)
	GetCat(context.Context, *GetCatReq) (*GetCatResp, error)
	AddCat(context.Context, *AddCatReq) (*AddCatResp, error)
	UpdateCat(context.Context, *UpdateCatReq) (*UpdateCatResp, error)
	DeleteCat(context.Context, *DeleteCatReq) (*DeleteCatResp, error)
	mustEmbedUnimplementedCatRpcServer()
}

// UnimplementedCatRpcServer must be embedded to have forward compatible implementations.
type UnimplementedCatRpcServer struct {
}

func (UnimplementedCatRpcServer) GetManyCat(context.Context, *GetManyCatReq) (*GetManyCatResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetManyCat not implemented")
}
func (UnimplementedCatRpcServer) GetCat(context.Context, *GetCatReq) (*GetCatResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCat not implemented")
}
func (UnimplementedCatRpcServer) AddCat(context.Context, *AddCatReq) (*AddCatResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCat not implemented")
}
func (UnimplementedCatRpcServer) UpdateCat(context.Context, *UpdateCatReq) (*UpdateCatResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCat not implemented")
}
func (UnimplementedCatRpcServer) DeleteCat(context.Context, *DeleteCatReq) (*DeleteCatResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCat not implemented")
}
func (UnimplementedCatRpcServer) mustEmbedUnimplementedCatRpcServer() {}

// UnsafeCatRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CatRpcServer will
// result in compilation errors.
type UnsafeCatRpcServer interface {
	mustEmbedUnimplementedCatRpcServer()
}

func RegisterCatRpcServer(s grpc.ServiceRegistrar, srv CatRpcServer) {
	s.RegisterService(&CatRpc_ServiceDesc, srv)
}

func _CatRpc_GetManyCat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetManyCatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatRpcServer).GetManyCat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cat.CatRpc/GetManyCat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatRpcServer).GetManyCat(ctx, req.(*GetManyCatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatRpc_GetCat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatRpcServer).GetCat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cat.CatRpc/GetCat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatRpcServer).GetCat(ctx, req.(*GetCatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatRpc_AddCat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatRpcServer).AddCat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cat.CatRpc/AddCat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatRpcServer).AddCat(ctx, req.(*AddCatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatRpc_UpdateCat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatRpcServer).UpdateCat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cat.CatRpc/UpdateCat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatRpcServer).UpdateCat(ctx, req.(*UpdateCatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatRpc_DeleteCat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatRpcServer).DeleteCat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cat.CatRpc/DeleteCat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatRpcServer).DeleteCat(ctx, req.(*DeleteCatReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CatRpc_ServiceDesc is the grpc.ServiceDesc for CatRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CatRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cat.CatRpc",
	HandlerType: (*CatRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetManyCat",
			Handler:    _CatRpc_GetManyCat_Handler,
		},
		{
			MethodName: "GetCat",
			Handler:    _CatRpc_GetCat_Handler,
		},
		{
			MethodName: "AddCat",
			Handler:    _CatRpc_AddCat_Handler,
		},
		{
			MethodName: "UpdateCat",
			Handler:    _CatRpc_UpdateCat_Handler,
		},
		{
			MethodName: "DeleteCat",
			Handler:    _CatRpc_DeleteCat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "collection.proto",
}
