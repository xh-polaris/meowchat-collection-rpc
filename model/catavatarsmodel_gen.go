// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	catAvatarsFieldNames          = builder.RawFieldNames(&CatAvatars{})
	catAvatarsRows                = strings.Join(catAvatarsFieldNames, ",")
	catAvatarsRowsExpectAutoSet   = strings.Join(stringx.Remove(catAvatarsFieldNames, "`id`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`"), ",")
	catAvatarsRowsWithPlaceHolder = strings.Join(stringx.Remove(catAvatarsFieldNames, "`id`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`"), "=?,") + "=?"

	cacheMeowchatCollectionRpcCatAvatarsIdPrefix = "cache:meowchatCollectionRpc:catAvatars:id:"
)

type (
	catAvatarsModel interface {
		Insert(ctx context.Context, data *CatAvatars) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*CatAvatars, error)
		Update(ctx context.Context, data *CatAvatars) error
		Delete(ctx context.Context, id int64) error
	}

	defaultCatAvatarsModel struct {
		sqlc.CachedConn
		table string
	}

	CatAvatars struct {
		Id       int64     `db:"id"`
		CreateAt time.Time `db:"create_at"`
		DeleteAt time.Time `db:"delete_at"`
		CatId    int64     `db:"cat_id"`
		Url      string    `db:"url"`
	}
)

func newCatAvatarsModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultCatAvatarsModel {
	return &defaultCatAvatarsModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`cat_avatars`",
	}
}

func (m *defaultCatAvatarsModel) Delete(ctx context.Context, id int64) error {
	meowchatCollectionRpcCatAvatarsIdKey := fmt.Sprintf("%s%v", cacheMeowchatCollectionRpcCatAvatarsIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, meowchatCollectionRpcCatAvatarsIdKey)
	return err
}

func (m *defaultCatAvatarsModel) FindOne(ctx context.Context, id int64) (*CatAvatars, error) {
	meowchatCollectionRpcCatAvatarsIdKey := fmt.Sprintf("%s%v", cacheMeowchatCollectionRpcCatAvatarsIdPrefix, id)
	var resp CatAvatars
	err := m.QueryRowCtx(ctx, &resp, meowchatCollectionRpcCatAvatarsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", catAvatarsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCatAvatarsModel) Insert(ctx context.Context, data *CatAvatars) (sql.Result, error) {
	meowchatCollectionRpcCatAvatarsIdKey := fmt.Sprintf("%s%v", cacheMeowchatCollectionRpcCatAvatarsIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, catAvatarsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.DeleteAt, data.CatId, data.Url)
	}, meowchatCollectionRpcCatAvatarsIdKey)
	return ret, err
}

func (m *defaultCatAvatarsModel) Update(ctx context.Context, data *CatAvatars) error {
	meowchatCollectionRpcCatAvatarsIdKey := fmt.Sprintf("%s%v", cacheMeowchatCollectionRpcCatAvatarsIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, catAvatarsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.DeleteAt, data.CatId, data.Url, data.Id)
	}, meowchatCollectionRpcCatAvatarsIdKey)
	return err
}

func (m *defaultCatAvatarsModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheMeowchatCollectionRpcCatAvatarsIdPrefix, primary)
}

func (m *defaultCatAvatarsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", catAvatarsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultCatAvatarsModel) tableName() string {
	return m.table
}
